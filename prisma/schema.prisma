// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String?
  title     String?
  messages  Message[]
}

model Message {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role
  content       String         @db.Text
  sessionId     String
  completed     Boolean        @default(false)
  session       Session        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  toolSnapshots ToolSnapshot[]

  @@index([sessionId])
}

model ToolSnapshot {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  toolName   String
  input      Json
  isExecuted Boolean  @default(false)
  output     Json
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model TestMessage {
  id        String   @id @default(cuid())
  sessionId String
  text      String
  progress  Int      @default(0)
  reasoning String?  @default("")
  status    String   @default("running") // running | completed | terminated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  user
  assistant
  system
}
