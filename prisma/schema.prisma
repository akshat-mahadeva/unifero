// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String?
  title     String?
  messages  Message[]
}

model Message {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role
  content       String         @db.Text
  sessionId     String
  completed     Boolean        @default(false)
  session       Session        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  toolSnapshots ToolSnapshot[]

  @@index([sessionId])
}

model ToolSnapshot {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  toolName   String
  input      Json
  isExecuted Boolean  @default(false)
  output     Json
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

enum Role {
  user
  assistant
  system
}

model DeepSearchSession {
  id             String              @id @default(cuid())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String?
  title          String?
  activeStreamId String?
  canceledAt     DateTime?
  messages       DeepSearchMessage[]
}

model DeepSearchMessage {
  id                     String                   @id @default(cuid())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  role                   DeepSearchRole
  content                String                   @db.Text
  progress               Int                      @default(0)
  sessionId              String
  isDeepSearchInitiated  Boolean                  @default(false)
  completed              Boolean                  @default(false)
  session                DeepSearchSession        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  DeepSearchToolSnapshot DeepSearchToolSnapshot[]
  DeepSearchStep         DeepSearchStep[]
  DeepSearchSource       DeepSearchSource[]

  @@index([sessionId])
}

model DeepSearchToolSnapshot {
  id         String            @id @default(cuid())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  toolName   String
  input      Json
  isExecuted Boolean           @default(false)
  output     Json
  messageId  String
  message    DeepSearchMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model DeepSearchStep {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  stepName          String
  isExecuted        Boolean            @default(false)
  input             Json
  output            Json
  reasoningText     String?            @db.Text
  type              DeepSearchStepType @default(analyze)
  deepSearchMsgId   String
  deepSearchMessage DeepSearchMessage  @relation(fields: [deepSearchMsgId], references: [id], onDelete: Cascade)
  sources           DeepSearchSource[]

  @@index([deepSearchMsgId])
}

model DeepSearchSource {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String
  url           String
  favicon       String?
  content       String?           @db.Text
  images        Json?
  publishedDate DateTime?
  messageId     String
  stepId        String?
  message       DeepSearchMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  step          DeepSearchStep?   @relation(fields: [stepId], references: [id], onDelete: SetNull)

  @@unique([url, stepId])
  @@index([messageId])
  @@index([stepId])
}

enum DeepSearchStepType {
  search
  analyze
  evaluate
  report
}

enum DeepSearchRole {
  user
  assistant
  system
}
